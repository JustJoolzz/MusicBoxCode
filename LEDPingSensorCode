//Led Panel stuff
#include <LedControl.h>
//sets the pins for the library, (DIN, CLK, CS, 1) 1 is the panel you're using (incase there were multiple)
LedControl lc = LedControl(6, 8, 7, 1);




//Joolz's code for ping sensors
int ExtPos = 0;
bool BlockedA = false;
bool BlockedB = false;
bool BlockedC = false;
int detectionRange = 40;




// looking is a 2D array which has all frames for searching phase animation
// looking[0] = eyes in middle
// looking[1] = eyes on left
// looking[2] = eyes on right
// looking[3] = eyes in middle, shifted up
// looking[4] = eyes in middle, shifted down
// looking[5] = eyes in middle, shifted down twice
int looking[6][8] = {{ B00000000, B00000000, B01110000, B00000000, B00000000, B01110000, B00000000, B00000000 },
                    { B00000000, B00000000, B00000000, B01110000, B00000000, B00000000, B01110000, B00000000 },
                     { B00000000, B01110000, B00000000, B00000000, B01110000, B00000000, B00000000, B00000000 },
                     { B00000000, B00000000, B11100000, B00000000, B00000000, B11100000, B00000000, B00000000 },
                     { B00000000, B00000000, B00111000, B00000000, B00000000, B00111000, B00000000, B00000000 },
                    { B00000000, B00000000, B00011100, B00000000, B00000000, B00011100, B00000000, B00000000 }};








//happy is a 2D array which has all frames for happy animation
// happy[0] = happy eyes right
// happy[1] = happy eyes left
int happy[2][8] = {{ B00000000, B00010000, B00100000, B00010000, B00000000, B00010000, B00100000, B00010000 },
                  { B00010000, B00100000, B00010000, B00000000, B00010000, B00100000, B00010000, B00000000 }};








//mad is a 2D array which has all frames for mad animation
// mad[0] = mad eyes up
// mad[1] = happy eyes down
int mad[2][8] = {{ B00000000, B01010000, B00100000, B00000000, B00000000, B00100000, B01010000, B00000000 },
                  { B00000000, B00101000, B00010000, B00000000, B00000000, B00010000, B00101000, B00000000 }};












/*
  Ultrasonic Sensor HC-SR04 and Arduino Tutorial




  by Dejan Nedelkovski,
  www.HowToMechatronics.com




*/
// defines pins numbers
const int trigPinA = 2;
const int echoPinA = A2;




const int trigPinB = 3;
const int echoPinB = A3;




const int trigPinC = 4;
const int echoPinC = A4;




// defines variables
long durationA;
int distanceA;




long durationB;
int distanceB;




long durationC;
int distanceC;








void setup() {
  pinMode(trigPinA, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPinA, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication




    pinMode(trigPinB, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPinB, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication




    pinMode(trigPinC, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPinC, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600); // Starts the serial communication




  //The Max72XX is in power-saving mode on start up, we have to do a wakeup call
  lc.shutdown(0, false);  // wake up call
  lc.setIntensity(0, 8);  // set brightness to a medium
  lc.clearDisplay(0);     // clear the display




}
void loop() {
  // Clears the trigPin
  digitalWrite(trigPinA, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPinA, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinA, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  durationA = pulseIn(echoPinA, HIGH);
  // Calculating the distance
  distanceA = durationA * 0.034 / 2;
  // Prints the distance on the Serial Monitor
  //Serial.print("DistanceA: ");
  //Serial.println(distanceA);








    // Clears the trigPin
  digitalWrite(trigPinB, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPinB, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinB, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  durationB = pulseIn(echoPinB, HIGH);
  // Calculating the distance
  distanceB = durationB * 0.034 / 2;
  // Prints the distance on the Serial Monitor
  //Serial.print("DistanceB: ");
  //Serial.println(distanceB);








    // Clears the trigPin
  digitalWrite(trigPinC, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPinC, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinC, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  durationC = pulseIn(echoPinC, HIGH);
  // Calculating the distance
  distanceC = durationC * 0.034 / 2;
  // Prints the distance on the Serial Monitor
  //Serial.print("DistanceC: ");
  //Serial.println(distanceC);




//Joolz's code
//Sets bools for each sensor based on detection range
if (distanceA < detectionRange){
  BlockedA = true;
}else
{BlockedA = false;
}
if (distanceB < detectionRange){
  BlockedB = true;
}else
{BlockedB = false;
}
if (distanceC < detectionRange){
  BlockedC = true;
}else
{BlockedC = false;
}












// this is some logic to set ExtPos based on which sensors are blocked
if (BlockedA && BlockedB && BlockedC){
  ExtPos = 0;




}
else if (!BlockedA && !BlockedB && !BlockedC){
  ExtPos = 0;
}
else if(BlockedA && BlockedB){
  ExtPos = -1;
}
else if(BlockedA && !BlockedB){
  ExtPos = -2;
}
else if(BlockedC && BlockedB){
  ExtPos = 1;
}
else if(BlockedC && !BlockedB){
  ExtPos = 2;
}
else{
  ExtPos = 0;
}




switch (ExtPos){
  case 0:
   lc.setColumn(0, 0, looking[0][0]);
   lc.setColumn(0, 1, looking[0][1]);
   lc.setColumn(0, 2, looking[0][2]);
  lc.setColumn(0, 3, looking[0][3]);
   lc.setColumn(0, 4, looking[0][4]);
   lc.setColumn(0, 5, looking[0][5]);
   lc.setColumn(0, 6, looking[0][6]);
   lc.setColumn(0, 7, looking[0][7]);
    break;




  case 1:
    lc.setColumn(0, 0, looking[1][0]);
    lc.setColumn(0, 1, looking[1][1]);
    lc.setColumn(0, 2, looking[1][2]);
   lc.setColumn(0, 3, looking[1][3]);
   lc.setColumn(0, 4, looking[1][4]);
    lc.setColumn(0, 5, looking[1][5]);
    lc.setColumn(0, 6, looking[1][6]);
   lc.setColumn(0, 7, looking[1][7]);
    break ;
  case -1:
    lc.setColumn(0, 0, looking[2][0]);
    lc.setColumn(0, 1, looking[2][1]);
   lc.setColumn(0, 2, looking[2][2]);
    lc.setColumn(0, 3, looking[2][3]);
   lc.setColumn(0, 4, looking[2][4]);
    lc.setColumn(0, 5, looking[2][5]);
   lc.setColumn(0, 6, looking[2][6]);
   lc.setColumn(0, 7, looking[2][7]);
   break;
 
}












Serial.print("ExtPos is");
Serial.println(ExtPos);
Serial.print(BlockedA);
Serial.print(BlockedB);
Serial.print(BlockedC);
}

